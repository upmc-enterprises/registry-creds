---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "registry-creds.serviceAccountName" . }}-sa-test
  annotations:
    "helm.sh/hook": test
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ include "registry-creds.fullname" . }}-sa-test
  annotations:
    "helm.sh/hook": test
rules:
- apiGroups: [""]
  resources: ["secrets", "serviceaccounts"]
  verbs: [ "get", "list", "watch" ]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ include "registry-creds.fullname" . }}-sa-test
  annotations:
    "helm.sh/hook": test
subjects:
- kind: ServiceAccount
  name: {{ include "registry-creds.serviceAccountName" . }}-sa-test
  apiGroup: ""
roleRef:
  kind: Role 
  name: {{ include "registry-creds.fullname" . }}-sa-test
  apiGroup: rbac.authorization.k8s.io


---
apiVersion: v1
kind: Pod
metadata:
  name: "{{ include "registry-creds.fullname" . }}-sa-test-{{ randAlphaNum 5 | lower }}"
  labels:
    {{- include "registry-creds.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": test
spec:
  serviceAccountName: {{ include "registry-creds.serviceAccountName" . }}-sa-test
  containers:
    - name: sa-test
      image: alpine
      env:
        - name: K8S_VERSION
          value: "v{{ .Capabilities.KubeVersion.Major }}.{{ .Capabilities.KubeVersion.Minor }}.0"
      command: ['/bin/sh']
      args:
        - -c
        - |
          apk add curl jq
          curl -LO https://dl.k8s.io/release/${K8S_VERSION}/bin/linux/amd64/kubectl
          chmod +x kubectl
          set -e
          for secret in dpr-secret awsecr-cred acr-secret gcr-secret; do
            ./kubectl get secrets | grep -q "${secret}"
            ./kubectl get sa default -o json | grep -q "${secret}"
          done

  restartPolicy: Never
